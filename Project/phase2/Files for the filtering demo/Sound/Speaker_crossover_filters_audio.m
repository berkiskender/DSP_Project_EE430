% Split full-range audio into three channels with low, mid and high frequency bands.
% Each channel may be sent to different speakers (Woofer, midrange driver and tweeter)
% See the section titled "Speaker Crossover Filters" in Signal Processing Toolbox User's Guide.
%
% To stop playing audio:
%    clear sound 

% Oktay Sipahigil
% 02/01/2017

% [x,fs,t] = getAudio('Files/sayi_kadin.wav',0,10);
[x,fs,t] = getAudio('Files/C-Ercetin.mp3',0,15);

figure; plot(t,x); xlabel('Time (s)'); ylabel('x(t)');
figure; spctrgrm(x,fs,t(1));
% sound(x,fs);

%% Filter desgins
omg0 = 0.136;   %First delimiter frequency (times pi!)
omg1 = 0.317;   %Second delimiter frequency (times pi!)
att = 100;   %Stopband attenuation in dB
rp = 1;     %Passband ripple in dB

dlpFIR = designfilt('lowpassfir', ...
    'DesignMethod',        'equiripple', ...
    'PassbandFrequency',   omg0, ...
    'StopbandFrequency',   omg0*1.2, ...
    'PassbandRipple',      rp, ...
    'StopbandAttenuation', att);

dlpIIR = designfilt('lowpassiir', ...
    'DesignMethod',        'ellip', ...
    'PassbandFrequency',   omg0, ...
    'StopbandFrequency',   omg0*1.2, ...
    'PassbandRipple',      rp, ...
    'StopbandAttenuation', att);

dbpFIR = designfilt('bandpassfir', ...
    'DesignMethod',         'equiripple', ...
    'StopbandFrequency1',   omg0/1.2, ...
    'PassbandFrequency1',   omg0, ...
    'PassbandFrequency2',   omg1, ...
    'StopbandFrequency2',   omg1*1.2, ...
    'StopbandAttenuation1', att, ...
    'PassbandRipple',       rp, ...
    'StopbandAttenuation2', att);

dbpIIR = designfilt('bandpassiir', ...
    'DesignMethod',         'ellip', ...
    'StopbandFrequency1',   omg0/1.2, ...
    'PassbandFrequency1',   omg0, ...
    'PassbandFrequency2',   omg1, ...
    'StopbandFrequency2',   omg1*1.2, ...
    'StopbandAttenuation1', att, ...
    'PassbandRipple',       rp, ...
    'StopbandAttenuation2', att);

dhpFIR = designfilt('highpassfir', ...
    'DesignMethod',        'equiripple', ...
    'StopbandFrequency',   omg1/1.2, ...
    'PassbandFrequency',   omg1, ...
    'StopbandAttenuation', att, ...
    'PassbandRipple',      rp);

dhpIIR = designfilt('highpassiir', ...
    'DesignMethod',        'ellip', ...
    'StopbandFrequency',   omg1/1.2, ...
    'PassbandFrequency',   omg1, ...
    'StopbandAttenuation', att, ...
    'PassbandRipple',      rp);

fvtool(dlpIIR,dbpIIR,dhpIIR);
fvtool(dlpFIR,dbpFIR,dhpFIR);

% [z,p,k] = dlp.zpk();
% p(1:2) = 1./p(1:2);
% [b,a] = zp2tf(z,p,k);
% delta = [1;zeros(1000,1)];   n = 0:numel(delta)-1;
% figure;   stem(n,filter(b,a,delta),'filled');   xlabel('n');   ylabel('Impuls response of an unstable filter');

%% Filter data
ylpIIR = dlpIIR.filter(x);
ybpIIR = dbpIIR.filter(x);
yhpIIR = dhpIIR.filter(x);
ylpFIR = dlpFIR.filter(x);
ybpFIR = dbpFIR.filter(x);
yhpFIR = dhpFIR.filter(x);
% figure; spctrgrm(ylpIIR,fs,t(1)); title('(IIR) Lowpass channel  (Woofer) (dB)');
% figure; spctrgrm(ybpIIR,fs,t(1)); title('(IIR) Bandpass channel (Midrange) (dB)');
% figure; spctrgrm(yhpIIR,fs,t(1)); title('(IIR) Highpass channel (Tweeter) (dB)');
% figure; spctrgrm(ylpFIR,fs,t(1)); title('(FIR) Lowpass channel  (Woofer) (dB)');
% figure; spctrgrm(ybpFIR,fs,t(1)); title('(FIR) Bandpass channel (Midrange) (dB)');
% figure; spctrgrm(yhpFIR,fs,t(1)); title('(FIR) Highpass channel (Tweeter) (dB)');
% sound(ylpIIR,fs);
% sound(ybpIIR,fs);
% sound(yhpIIR,fs);
% sound(ylpFIR,fs);
% sound(ybpFIR,fs);
% sound(yhpFIR,fs);